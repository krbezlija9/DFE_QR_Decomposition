
package qrdecomp;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;

class qrDecompManager {
	private static int matrixSize = 16;
	public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel = new qrDecompKernel(manager.makeKernelParameters(), matrixSize);
		manager.setKernel(kernel);
		manager.setIO(IOType.ALL_CPU);
		manager.addMaxFileConstant("matrixSize", matrixSize);
		manager.createSLiCinterface();
		manager.build();
	}

}






/** Ovo je napravljeno od strane cookiecutter-a.
import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class qrDecompManager {

	private static final String s_kernelName = "qrDecompKernel";
	private static int matrixSize=16;
	public static void main(String[] args) {
		qrDecompEngineParameters params = new qrDecompEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel   = new qrDecompKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(
			link("x",   IODestination.CPU),
			link("y",   IODestination.CPU),
			link("s", IODestination.CPU));

		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();

		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);

		engine_interface.setScalar(s_kernelName, "a", a);

		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("x",   type, N * size);
		engine_interface.setStream("y",   type, N * size);
		engine_interface.setStream("s", type, N * size);
		return engine_interface;
	}

	private static void configBuild(Manager manager, qrDecompEngineParameters params) {
		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
**/
